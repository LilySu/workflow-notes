9 - Tasks
List all movies and their combined sales in millions of dollars

SELECT Title, CAST((Domestic_sales + International_sales)/1000000 AS Millions) as combined_sales FROM movies left join Boxoffice on Movies.Id = Boxoffice.Movie_id;

SELECT Title, cast(Rating * 10 as varchar(100)) + '%' as Percent_Rating FROM movies left join Boxoffice on Movies.Id = Boxoffice.Movie_id;

SELECT Title, Year FROM movies left join Boxoffice on Movies.Id = Boxoffice.Movie_id where Year % 2 = 0 ;

10
SELECT max(years_employed) FROM employees;

SELECT role, avg(years_employed) FROM employees group by role;

SELECT building, sum(years_employed) FROM employees group by building;

11
The HAVING clause constraints are written the same way as the WHERE clause constraints, and are applied to the grouped rows. With our examples, this might not seem like a particularly useful construct, but if you imagine data with millions of rows with different properties, being able to apply additional constraints is often necessary to quickly make sense of the data.

SELECT count(*) FROM employees where role = 'Artist';

SELECT role, count(*) FROM employees group by role;

SELECT sum(years_employed) from employees where role = 'Engineer';

12
SELECT director, count(*)title FROM movies group by director;

SELECT director, sum(domestic_sales) + sum(international_sales) as total_sales from movies left join boxoffice on id = movie_id group by director;

13
insert into movies
(title, director, year, length_minutes)
values ('Toy Story 4', 'John Lasseter', 2000, 92);

insert into movies
(title, director, year, length_minutes)
values ('Toy Story 4', 'John Lasseter', 2000, 92);